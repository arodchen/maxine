/*
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.max.vm.ext.graal.snippets;

import static com.oracle.graal.api.code.MemoryBarriers.*;
import static com.oracle.graal.nodes.extended.MembarNode.*;

import java.util.*;

import com.oracle.graal.api.code.*;
import com.oracle.graal.api.meta.*;
import com.oracle.graal.graph.*;
import com.oracle.graal.nodes.extended.*;
import com.oracle.graal.nodes.java.*;
import com.oracle.graal.nodes.spi.*;
import com.oracle.graal.nodes.type.*;
import com.oracle.graal.snippets.*;
import com.oracle.graal.snippets.Snippet.ConstantParameter;
import com.oracle.graal.snippets.Snippet.Parameter;
import com.oracle.graal.snippets.SnippetTemplate.*;
import com.oracle.max.vm.ext.graal.*;
import com.oracle.max.vm.ext.graal.nodes.*;
import com.sun.cri.ri.*;
import com.sun.max.annotate.*;
import com.sun.max.vm.*;
import com.sun.max.vm.actor.member.*;
import com.sun.max.vm.classfile.constant.*;
import com.sun.max.vm.object.*;
import com.sun.max.vm.runtime.*;

/**
 * Snippets for field access, resolved and unresolved. The unresolved field lowerings use similar code
 * generated by {@link T1X} and makes a runtime call to do the resolution. Ideally, the code
 * sequences would be shared, however, {@code T1X} does not do volatile handling in the template for
 * resolved fields (for some reason) and also uses {@code int} and casts for {@code boolean, byte, char, short} types
 * in the templates.
 *
 * When deoptimzation for Graal works, it might be better to follow the normal Graal expectation of deoptimizing the code
 * for unresolved fields, thus leaving the resolution to {@link T1X}.
 *
 * One possible improvement to unresolved field handling would be to inline the guard check.
 *
 * The resolved snippets are very simple and actually the same for instance fields and static fields,
 * as either the static tuple or the receiver is passed as the "object", so the signatures are identical.
 *
 * Unresolved snippets are more complex, as we can't access the static tuple until the resolution has occurred,
 * and the runtime calls in the (historic) {@link Snippets} class to do the resolution are different for static
 * and instance fields. So there are separate snippets for instance and static fields. There is also an intermediate
 * state where the field is resolved but the class may need to be initialized.
 *
 * Once the resolution/init is done, the resolved snippet can be invoked (as runtime code) to handle the field access.
 *
 * A note on naming. Although the bytecode names are {@code GET/PUT}, Graal uses {@code Load/Store} and does not distinguish static
 * loads by name, instead by the receiver field being {@code null}. We follow the Graal naming for the classes
 * that effect the lowering, but use the bytecode style names for the actual snippets and runtime entry methods.
 * Further we consistently use {@code Get#MODE#Field} where, {@code #MODE} is either {@code Instance} or {@code Static}.
 * Any action qualifier, e.g. {@code resolve} prefixes a name. The {@link Kind} of the access is used as a suffix,
 * e.g., {@code resolveGetStaticBoolean}.
 */
public class FieldSnippets extends SnippetLowerings implements SnippetsInterface {

    @HOSTED_ONLY
    public static void registerLowerings(VMConfiguration config, TargetDescription targetDescription, MetaAccessProvider runtime, Assumptions assumptions, Map<Class< ? extends Node>, LoweringProvider> lowerings) {
        new FieldSnippets(config, targetDescription, runtime, assumptions, lowerings);
    }

    @HOSTED_ONLY
    private FieldSnippets(VMConfiguration vmConfig, TargetDescription targetDescription, MetaAccessProvider runtime, Assumptions assumptions, Map<Class< ? extends Node>, LoweringProvider> lowerings) {
        super(runtime, assumptions, targetDescription);

        LoadFieldLowering loadFieldLowering = new LoadFieldLowering();
        StoreFieldLowering storeFieldLowering = new StoreFieldLowering();

        UnresolvedLoadFieldLowering unresolvedLoadFieldLowering = new UnresolvedLoadFieldLowering();
        UnresolvedStoreFieldLowering unresolvedStoreFieldLowering = new UnresolvedStoreFieldLowering();

        UnresolvedLoadFieldLowering unresolvedLoadStaticFieldLowering = new UnresolvedLoadFieldLowering();
        UnresolvedStoreFieldLowering unresolvedStoreStaticFieldLowering = new UnresolvedStoreFieldLowering();

        UnresolvedLoadFieldLowering loadHolderInitStaticFieldLowering = new UnresolvedLoadFieldLowering();
        UnresolvedStoreFieldLowering storeHolderInitStaticFieldLowering = new UnresolvedStoreFieldLowering();
        UnresolvedLoadFieldLowering loadHolderInitInstanceFieldLowering = new UnresolvedLoadFieldLowering();
        UnresolvedStoreFieldLowering storeHolderInitInstanceFieldLowering = new UnresolvedStoreFieldLowering();

        // Can only register one lowering class per node, so the static/init variants have to be handled in an ad hoc way
        unresolvedLoadFieldLowering.staticFieldLowering = unresolvedLoadStaticFieldLowering;
        unresolvedLoadFieldLowering.initHolderStaticFieldLowering = loadHolderInitStaticFieldLowering;
        unresolvedLoadFieldLowering.initHolderInstanceFieldLowering = loadHolderInitInstanceFieldLowering;

        unresolvedStoreFieldLowering.staticFieldLowering = unresolvedStoreStaticFieldLowering;
        unresolvedStoreFieldLowering.initHolderStaticFieldLowering = storeHolderInitStaticFieldLowering;
        unresolvedStoreFieldLowering.initHolderInstanceFieldLowering = storeHolderInitInstanceFieldLowering;


        addSnippets(loadFieldLowering, storeFieldLowering, unresolvedLoadFieldLowering, unresolvedStoreFieldLowering);


        lowerings.put(LoadFieldNode.class, loadFieldLowering);
        lowerings.put(StoreFieldNode.class, storeFieldLowering);
        lowerings.put(UnresolvedLoadFieldNode.class, unresolvedLoadFieldLowering);
        lowerings.put(UnresolvedStoreFieldNode.class, unresolvedStoreFieldLowering);

    }

    protected abstract class FieldLowering extends Lowering {
        protected final ResolvedJavaMethod[] snippets = new ResolvedJavaMethod[Kind.values().length];

        void setSnippet(Kind kind, ResolvedJavaMethod snippet) {
            snippets[kind.ordinal()] = snippet;
        }
    }

    protected abstract class ResolvedFieldLowering extends FieldLowering {

        void lower(AccessFieldNode node) {
            FieldActor fieldActor = (FieldActor) MaxResolvedJavaField.getRiResolvedField(node.field());
            boolean isStatic = node.isStatic();
            Key key = new Key(snippets[KindMap.toGraalKind(fieldActor.kind).ordinal()]);
            key.add("isVolatile", fieldActor.isVolatile());
            Arguments args = new Arguments();
            args.add("object", isStatic ? fieldActor.holder().staticTuple() : node.object());
            args.add("offset", fieldActor.offset());
            storeFieldArg(node, args);
            instantiate(node, key, args);
        }

        protected void storeFieldArg(AccessFieldNode node, Arguments args) {
        }

    }

    protected class LoadFieldLowering extends ResolvedFieldLowering implements LoweringProvider<LoadFieldNode> {

        @Override
        public void lower(LoadFieldNode node, LoweringTool tool) {
            lower(node);
        }

    }

    protected class StoreFieldLowering extends ResolvedFieldLowering implements LoweringProvider<StoreFieldNode> {

        @Override
        public void lower(StoreFieldNode node, LoweringTool tool) {
            lower(node);
        }

        @Override
        protected void storeFieldArg(AccessFieldNode node, Arguments args) {
            args.add("value", ((StoreFieldNode) node).value());
        }
    }

    protected class UnresolvedFieldLowering extends FieldLowering {
        /**
         * Holds the snippet methods for the static variants.
         */
        UnresolvedFieldLowering staticFieldLowering;
        /**
         * Holds the snippet for class initialization and static variant.
         */
        UnresolvedFieldLowering initHolderStaticFieldLowering;
        /**
         * Holds the snippet for class initialization and instance variant.
         */
        UnresolvedFieldLowering initHolderInstanceFieldLowering;

        void lower(UnresolvedAccessFieldNode node) {
            Key key;
            Arguments args = new Arguments();
            boolean isStatic = node.object() == null;
            int ord = node.kind().ordinal();
            RiField riField = MaxJavaField.getRiField(node.field());
            if (riField instanceof FieldActor) {
                // resolved but may need class initialization
                key = new Key(isStatic ? initHolderStaticFieldLowering.snippets[ord] : initHolderInstanceFieldLowering.snippets[ord]);
                args.add("f", riField);
            } else {
                UnresolvedField unresolvedField = (UnresolvedField) riField;
                ResolutionGuard.InPool guard = unresolvedField.constantPool.makeResolutionGuard(unresolvedField.cpi);
                key = new Key(isStatic ? staticFieldLowering.snippets[ord] : snippets[ord]);
                args.add("guard", guard);
            }
            if (!isStatic) {
                args.add("object", node.object());
            }
            storeFieldArg(node, args);
            instantiate(node, key, args);
        }

        protected void storeFieldArg(UnresolvedAccessFieldNode node, Arguments args) {
        }

    }

    protected class UnresolvedLoadFieldLowering extends UnresolvedFieldLowering implements LoweringProvider<UnresolvedLoadFieldNode> {

        @Override
        public void lower(UnresolvedLoadFieldNode node, LoweringTool tool) {
            lower(node);
        }

    }

    protected class UnresolvedStoreFieldLowering extends UnresolvedFieldLowering implements LoweringProvider<UnresolvedStoreFieldNode> {

        @Override
        public void lower(UnresolvedStoreFieldNode node, LoweringTool tool) {
            lower(node);
        }

        @Override
        protected void storeFieldArg(UnresolvedAccessFieldNode node, Arguments args) {
            args.add("value", ((UnresolvedStoreFieldNode) node).value());
        }
    }

// START GENERATED CODE
    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean getFieldBooleanSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        boolean result = TupleAccess.readBoolean(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldBooleanSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") boolean value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeBoolean(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static boolean resolveAndGetInstanceFieldBoolean(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldBoolean(f, object);
    }

    @RUNTIME_ENTRY
    public static boolean resolveAndGetStaticFieldBoolean(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldBoolean(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldBoolean(ResolutionGuard.InPool guard, Object object, boolean value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldBoolean(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldBoolean(ResolutionGuard.InPool guard, boolean value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldBoolean(f, value);
    }

    @RUNTIME_ENTRY
    public static boolean holderInitAndGetInstanceFieldBoolean(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldBooleanSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static boolean holderInitAndGetStaticFieldBoolean(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldBooleanSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldBoolean(FieldActor f, Object object, boolean value) {
        Snippets.makeHolderInitialized(f);
        putFieldBooleanSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldBoolean(FieldActor f, boolean value) {
        Snippets.makeHolderInitialized(f);
        putFieldBooleanSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean holderInitAndGetInstanceFieldBooleanSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldBoolean(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean holderInitAndGetStaticFieldBooleanSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldBoolean(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldBooleanSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") boolean value) {
        holderInitAndPutInstanceFieldBoolean(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldBooleanSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") boolean value) {
        holderInitAndPutStaticFieldBoolean(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean resolveAndGetInstanceFieldBooleanSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldBoolean(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean resolveAndGetStaticFieldBooleanSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldBoolean(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldBooleanSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") boolean value) {
        resolveAndPutInstanceFieldBoolean(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldBooleanSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") boolean value) {
        resolveAndPutStaticFieldBoolean(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte getFieldByteSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        byte result = TupleAccess.readByte(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldByteSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") byte value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeByte(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static byte resolveAndGetInstanceFieldByte(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldByte(f, object);
    }

    @RUNTIME_ENTRY
    public static byte resolveAndGetStaticFieldByte(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldByte(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldByte(ResolutionGuard.InPool guard, Object object, byte value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldByte(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldByte(ResolutionGuard.InPool guard, byte value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldByte(f, value);
    }

    @RUNTIME_ENTRY
    public static byte holderInitAndGetInstanceFieldByte(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldByteSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static byte holderInitAndGetStaticFieldByte(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldByteSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldByte(FieldActor f, Object object, byte value) {
        Snippets.makeHolderInitialized(f);
        putFieldByteSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldByte(FieldActor f, byte value) {
        Snippets.makeHolderInitialized(f);
        putFieldByteSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte holderInitAndGetInstanceFieldByteSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldByte(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte holderInitAndGetStaticFieldByteSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldByte(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldByteSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") byte value) {
        holderInitAndPutInstanceFieldByte(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldByteSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") byte value) {
        holderInitAndPutStaticFieldByte(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte resolveAndGetInstanceFieldByteSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldByte(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte resolveAndGetStaticFieldByteSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldByte(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldByteSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") byte value) {
        resolveAndPutInstanceFieldByte(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldByteSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") byte value) {
        resolveAndPutStaticFieldByte(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short getFieldShortSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        short result = TupleAccess.readShort(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldShortSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") short value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeShort(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static short resolveAndGetInstanceFieldShort(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldShort(f, object);
    }

    @RUNTIME_ENTRY
    public static short resolveAndGetStaticFieldShort(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldShort(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldShort(ResolutionGuard.InPool guard, Object object, short value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldShort(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldShort(ResolutionGuard.InPool guard, short value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldShort(f, value);
    }

    @RUNTIME_ENTRY
    public static short holderInitAndGetInstanceFieldShort(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldShortSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static short holderInitAndGetStaticFieldShort(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldShortSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldShort(FieldActor f, Object object, short value) {
        Snippets.makeHolderInitialized(f);
        putFieldShortSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldShort(FieldActor f, short value) {
        Snippets.makeHolderInitialized(f);
        putFieldShortSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short holderInitAndGetInstanceFieldShortSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldShort(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short holderInitAndGetStaticFieldShortSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldShort(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldShortSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") short value) {
        holderInitAndPutInstanceFieldShort(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldShortSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") short value) {
        holderInitAndPutStaticFieldShort(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short resolveAndGetInstanceFieldShortSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldShort(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short resolveAndGetStaticFieldShortSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldShort(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldShortSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") short value) {
        resolveAndPutInstanceFieldShort(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldShortSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") short value) {
        resolveAndPutStaticFieldShort(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char getFieldCharSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        char result = TupleAccess.readChar(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldCharSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") char value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeChar(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static char resolveAndGetInstanceFieldChar(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldChar(f, object);
    }

    @RUNTIME_ENTRY
    public static char resolveAndGetStaticFieldChar(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldChar(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldChar(ResolutionGuard.InPool guard, Object object, char value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldChar(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldChar(ResolutionGuard.InPool guard, char value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldChar(f, value);
    }

    @RUNTIME_ENTRY
    public static char holderInitAndGetInstanceFieldChar(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldCharSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static char holderInitAndGetStaticFieldChar(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldCharSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldChar(FieldActor f, Object object, char value) {
        Snippets.makeHolderInitialized(f);
        putFieldCharSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldChar(FieldActor f, char value) {
        Snippets.makeHolderInitialized(f);
        putFieldCharSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char holderInitAndGetInstanceFieldCharSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldChar(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char holderInitAndGetStaticFieldCharSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldChar(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldCharSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") char value) {
        holderInitAndPutInstanceFieldChar(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldCharSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") char value) {
        holderInitAndPutStaticFieldChar(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char resolveAndGetInstanceFieldCharSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldChar(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char resolveAndGetStaticFieldCharSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldChar(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldCharSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") char value) {
        resolveAndPutInstanceFieldChar(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldCharSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") char value) {
        resolveAndPutStaticFieldChar(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int getFieldIntSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        int result = TupleAccess.readInt(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldIntSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") int value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeInt(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static int resolveAndGetInstanceFieldInt(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldInt(f, object);
    }

    @RUNTIME_ENTRY
    public static int resolveAndGetStaticFieldInt(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldInt(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldInt(ResolutionGuard.InPool guard, Object object, int value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldInt(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldInt(ResolutionGuard.InPool guard, int value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldInt(f, value);
    }

    @RUNTIME_ENTRY
    public static int holderInitAndGetInstanceFieldInt(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldIntSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static int holderInitAndGetStaticFieldInt(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldIntSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldInt(FieldActor f, Object object, int value) {
        Snippets.makeHolderInitialized(f);
        putFieldIntSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldInt(FieldActor f, int value) {
        Snippets.makeHolderInitialized(f);
        putFieldIntSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int holderInitAndGetInstanceFieldIntSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldInt(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int holderInitAndGetStaticFieldIntSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldInt(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldIntSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") int value) {
        holderInitAndPutInstanceFieldInt(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldIntSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") int value) {
        holderInitAndPutStaticFieldInt(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int resolveAndGetInstanceFieldIntSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldInt(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int resolveAndGetStaticFieldIntSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldInt(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldIntSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") int value) {
        resolveAndPutInstanceFieldInt(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldIntSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") int value) {
        resolveAndPutStaticFieldInt(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float getFieldFloatSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        float result = TupleAccess.readFloat(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldFloatSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") float value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeFloat(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static float resolveAndGetInstanceFieldFloat(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldFloat(f, object);
    }

    @RUNTIME_ENTRY
    public static float resolveAndGetStaticFieldFloat(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldFloat(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldFloat(ResolutionGuard.InPool guard, Object object, float value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldFloat(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldFloat(ResolutionGuard.InPool guard, float value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldFloat(f, value);
    }

    @RUNTIME_ENTRY
    public static float holderInitAndGetInstanceFieldFloat(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldFloatSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static float holderInitAndGetStaticFieldFloat(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldFloatSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldFloat(FieldActor f, Object object, float value) {
        Snippets.makeHolderInitialized(f);
        putFieldFloatSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldFloat(FieldActor f, float value) {
        Snippets.makeHolderInitialized(f);
        putFieldFloatSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float holderInitAndGetInstanceFieldFloatSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldFloat(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float holderInitAndGetStaticFieldFloatSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldFloat(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldFloatSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") float value) {
        holderInitAndPutInstanceFieldFloat(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldFloatSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") float value) {
        holderInitAndPutStaticFieldFloat(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float resolveAndGetInstanceFieldFloatSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldFloat(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float resolveAndGetStaticFieldFloatSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldFloat(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldFloatSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") float value) {
        resolveAndPutInstanceFieldFloat(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldFloatSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") float value) {
        resolveAndPutStaticFieldFloat(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long getFieldLongSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        long result = TupleAccess.readLong(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldLongSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") long value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeLong(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static long resolveAndGetInstanceFieldLong(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldLong(f, object);
    }

    @RUNTIME_ENTRY
    public static long resolveAndGetStaticFieldLong(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldLong(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldLong(ResolutionGuard.InPool guard, Object object, long value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldLong(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldLong(ResolutionGuard.InPool guard, long value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldLong(f, value);
    }

    @RUNTIME_ENTRY
    public static long holderInitAndGetInstanceFieldLong(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldLongSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static long holderInitAndGetStaticFieldLong(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldLongSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldLong(FieldActor f, Object object, long value) {
        Snippets.makeHolderInitialized(f);
        putFieldLongSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldLong(FieldActor f, long value) {
        Snippets.makeHolderInitialized(f);
        putFieldLongSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long holderInitAndGetInstanceFieldLongSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldLong(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long holderInitAndGetStaticFieldLongSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldLong(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldLongSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") long value) {
        holderInitAndPutInstanceFieldLong(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldLongSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") long value) {
        holderInitAndPutStaticFieldLong(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long resolveAndGetInstanceFieldLongSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldLong(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long resolveAndGetStaticFieldLongSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldLong(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldLongSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") long value) {
        resolveAndPutInstanceFieldLong(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldLongSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") long value) {
        resolveAndPutStaticFieldLong(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double getFieldDoubleSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        double result = TupleAccess.readDouble(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldDoubleSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") double value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeDouble(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static double resolveAndGetInstanceFieldDouble(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldDouble(f, object);
    }

    @RUNTIME_ENTRY
    public static double resolveAndGetStaticFieldDouble(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldDouble(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldDouble(ResolutionGuard.InPool guard, Object object, double value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldDouble(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldDouble(ResolutionGuard.InPool guard, double value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldDouble(f, value);
    }

    @RUNTIME_ENTRY
    public static double holderInitAndGetInstanceFieldDouble(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldDoubleSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static double holderInitAndGetStaticFieldDouble(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldDoubleSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldDouble(FieldActor f, Object object, double value) {
        Snippets.makeHolderInitialized(f);
        putFieldDoubleSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldDouble(FieldActor f, double value) {
        Snippets.makeHolderInitialized(f);
        putFieldDoubleSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double holderInitAndGetInstanceFieldDoubleSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return holderInitAndGetInstanceFieldDouble(f, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double holderInitAndGetStaticFieldDoubleSnippet(@Parameter("f") FieldActor f) {
        return holderInitAndGetStaticFieldDouble(f);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldDoubleSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") double value) {
        holderInitAndPutInstanceFieldDouble(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldDoubleSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") double value) {
        holderInitAndPutStaticFieldDouble(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double resolveAndGetInstanceFieldDoubleSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetInstanceFieldDouble(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double resolveAndGetStaticFieldDoubleSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFieldDouble(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldDoubleSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") double value) {
        resolveAndPutInstanceFieldDouble(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldDoubleSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") double value) {
        resolveAndPutStaticFieldDouble(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object getFieldObjectSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        Object result = TupleAccess.readObject(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return UnsafeCastNode.unsafeCast(result, StampFactory.forNodeIntrinsic());
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void putFieldObjectSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") Object value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeObject(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static Object resolveAndGetInstanceFieldObject(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        return holderInitAndGetInstanceFieldObject(f, object);
    }

    @RUNTIME_ENTRY
    public static Object resolveAndGetStaticFieldObject(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        return holderInitAndGetStaticFieldObject(f);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutInstanceFieldObject(ResolutionGuard.InPool guard, Object object, Object value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        holderInitAndPutInstanceFieldObject(f, object, value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFieldObject(ResolutionGuard.InPool guard, Object value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        holderInitAndPutStaticFieldObject(f, value);
    }

    @RUNTIME_ENTRY
    public static Object holderInitAndGetInstanceFieldObject(FieldActor f, Object object) {
        Snippets.makeHolderInitialized(f);
        return getFieldObjectSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static Object holderInitAndGetStaticFieldObject(FieldActor f) {
        Snippets.makeHolderInitialized(f);
        return getFieldObjectSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutInstanceFieldObject(FieldActor f, Object object, Object value) {
        Snippets.makeHolderInitialized(f);
        putFieldObjectSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void holderInitAndPutStaticFieldObject(FieldActor f, Object value) {
        Snippets.makeHolderInitialized(f);
        putFieldObjectSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object holderInitAndGetInstanceFieldObjectSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object) {
        return UnsafeCastNode.unsafeCast(holderInitAndGetInstanceFieldObject(f, object), StampFactory.forNodeIntrinsic());
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object holderInitAndGetStaticFieldObjectSnippet(@Parameter("f") FieldActor f) {
        return UnsafeCastNode.unsafeCast(holderInitAndGetStaticFieldObject(f), StampFactory.forNodeIntrinsic());
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutInstanceFieldObjectSnippet(@Parameter("f") FieldActor f, @Parameter("object") Object object,
            @Parameter("value") Object value) {
        holderInitAndPutInstanceFieldObject(f, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void holderInitAndPutStaticFieldObjectSnippet(@Parameter("f") FieldActor f,
            @Parameter("value") Object value) {
        holderInitAndPutStaticFieldObject(f, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object resolveAndGetInstanceFieldObjectSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return UnsafeCastNode.unsafeCast(resolveAndGetInstanceFieldObject(guard, object), StampFactory.forNodeIntrinsic());
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object resolveAndGetStaticFieldObjectSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return UnsafeCastNode.unsafeCast(resolveAndGetStaticFieldObject(guard), StampFactory.forNodeIntrinsic());
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutInstanceFieldObjectSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") Object value) {
        resolveAndPutInstanceFieldObject(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void resolveAndPutStaticFieldObjectSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") Object value) {
        resolveAndPutStaticFieldObject(guard, value);
    }

    @HOSTED_ONLY
    private void addSnippets(
            LoadFieldLowering loadFieldLowering, StoreFieldLowering storeFieldLowering,
            UnresolvedLoadFieldLowering loadUnresolvedFieldLowering, UnresolvedStoreFieldLowering storeUnresolvedFieldLowering) {
        loadFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "getFieldBooleanSnippet"));
        storeFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "putFieldBooleanSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldBooleanSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldBooleanSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldBooleanSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldBooleanSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldBooleanSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldBooleanSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldBooleanSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldBooleanSnippet"));
        loadFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "getFieldByteSnippet"));
        storeFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "putFieldByteSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldByteSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldByteSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldByteSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldByteSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldByteSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldByteSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldByteSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldByteSnippet"));
        loadFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "getFieldShortSnippet"));
        storeFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "putFieldShortSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldShortSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldShortSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldShortSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldShortSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldShortSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldShortSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldShortSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldShortSnippet"));
        loadFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "getFieldCharSnippet"));
        storeFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "putFieldCharSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldCharSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldCharSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldCharSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldCharSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldCharSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldCharSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldCharSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldCharSnippet"));
        loadFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "getFieldIntSnippet"));
        storeFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "putFieldIntSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldIntSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldIntSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldIntSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldIntSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldIntSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldIntSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldIntSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldIntSnippet"));
        loadFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "getFieldFloatSnippet"));
        storeFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "putFieldFloatSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldFloatSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldFloatSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldFloatSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldFloatSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldFloatSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldFloatSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldFloatSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldFloatSnippet"));
        loadFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "getFieldLongSnippet"));
        storeFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "putFieldLongSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldLongSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldLongSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldLongSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldLongSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldLongSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldLongSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldLongSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldLongSnippet"));
        loadFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "getFieldDoubleSnippet"));
        storeFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "putFieldDoubleSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldDoubleSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldDoubleSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldDoubleSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldDoubleSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldDoubleSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldDoubleSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldDoubleSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldDoubleSnippet"));
        loadFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "getFieldObjectSnippet"));
        storeFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "putFieldObjectSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "resolveAndGetInstanceFieldObjectSnippet"));
        loadUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "resolveAndGetStaticFieldObjectSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "resolveAndPutInstanceFieldObjectSnippet"));
        storeUnresolvedFieldLowering.staticFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "resolveAndPutStaticFieldObjectSnippet"));
        loadUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "holderInitAndGetInstanceFieldObjectSnippet"));
        loadUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "holderInitAndGetStaticFieldObjectSnippet"));
        storeUnresolvedFieldLowering.initHolderInstanceFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "holderInitAndPutInstanceFieldObjectSnippet"));
        storeUnresolvedFieldLowering.initHolderStaticFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "holderInitAndPutStaticFieldObjectSnippet"));
    }
// END GENERATED CODE

}
