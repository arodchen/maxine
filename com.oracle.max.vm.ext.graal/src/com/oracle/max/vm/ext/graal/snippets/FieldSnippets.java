/*
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.max.vm.ext.graal.snippets;

import static com.oracle.graal.api.code.MemoryBarriers.*;
import static com.oracle.graal.nodes.extended.MembarNode.*;

import java.lang.reflect.*;
import java.util.*;

import com.oracle.graal.api.code.*;
import com.oracle.graal.api.meta.*;
import com.oracle.graal.graph.*;
import com.oracle.graal.nodes.java.*;
import com.oracle.graal.nodes.spi.*;
import com.oracle.graal.snippets.*;
import com.oracle.graal.snippets.Snippet.ConstantParameter;
import com.oracle.graal.snippets.Snippet.Parameter;
import com.oracle.graal.snippets.SnippetTemplate.*;
import com.oracle.max.vm.ext.graal.*;
import com.oracle.max.vm.ext.graal.nodes.*;
import com.sun.max.annotate.*;
import com.sun.max.vm.*;
import com.sun.max.vm.actor.member.*;
import com.sun.max.vm.classfile.constant.*;
import com.sun.max.vm.object.*;
import com.sun.max.vm.runtime.*;

/**
 * Snippets for field access, resolved and unresolved. The unresolved field lowerings use similar code
 * generated by {@link T1X} and makes a runtime call to do the resolution. Ideally, the code
 * sequences would be shared, however, {@code T1X} does not do volatile handling in the template for
 * resolved fields (for some reason) and also uses {@code int} and casts for {@code boolean, byte, char, short} types
 * in the templates.
 *
 * When deoptimzation for Graal works, it might be better to follow the normal Graal expectation of deoptimizing the code
 * for unresolved fields, thus leaving the resolution to {@link T1X}.
 *
 * One possible improvement to unresolved field handling would be to inline the guard check.
 *
 * The resolved snippets are very simple and actually the same for instance fields and static fields,
 * as either the static tuple or the receiver is passed as the "object", so the signatures are identical.
 *
 * Unresolved snippets are more complex, as we can't access the static tuple until the resolution has occurred,
 * and the runtime calls in the (historic) {@link Snippets} class to do the resolution are different for static
 * and instance fields. So there are separate snippets for instance and static fields.
 *
 * However, once the resolution is done, the resolved snippet can be invoked (as runtime code) to handle the field access.
 */
public class FieldSnippets extends SnippetLowerings implements SnippetsInterface {

    @HOSTED_ONLY
    public static void registerLowerings(VMConfiguration config, TargetDescription targetDescription, MetaAccessProvider runtime, Assumptions assumptions, Map<Class< ? extends Node>, LoweringProvider> lowerings) {
        new FieldSnippets(config, targetDescription, runtime, assumptions, lowerings);
    }

    @HOSTED_ONLY
    private FieldSnippets(VMConfiguration vmConfig, TargetDescription targetDescription, MetaAccessProvider runtime, Assumptions assumptions, Map<Class< ? extends Node>, LoweringProvider> lowerings) {
        super(runtime, assumptions, targetDescription);

        LoadFieldLowering loadFieldLowering = new LoadFieldLowering();
        StoreFieldLowering storeFieldLowering = new StoreFieldLowering();

        LoadUnresolvedFieldLowering loadUnresolvedFieldLowering = new LoadUnresolvedFieldLowering();
        StoreUnresolvedFieldLowering storeUnresolvedFieldLowering = new StoreUnresolvedFieldLowering();
        LoadUnresolvedFieldLowering loadUnresolvedStaticFieldLowering = new LoadUnresolvedFieldLowering();
        StoreUnresolvedFieldLowering storeUnresolvedStaticFieldLowering = new StoreUnresolvedFieldLowering();
        addSnippets(loadFieldLowering, storeFieldLowering, loadUnresolvedFieldLowering, storeUnresolvedFieldLowering,
                        loadUnresolvedStaticFieldLowering, storeUnresolvedStaticFieldLowering);

        // Can only register one lowering class per node, so the static variants have to be handled in an ad hoc way
        loadUnresolvedFieldLowering.staticFieldLowering = loadUnresolvedStaticFieldLowering;
        storeUnresolvedFieldLowering.staticFieldLowering = storeUnresolvedStaticFieldLowering;

        lowerings.put(LoadFieldNode.class, loadFieldLowering);
        lowerings.put(StoreFieldNode.class, storeFieldLowering);
        lowerings.put(LoadUnresolvedFieldNode.class, loadUnresolvedFieldLowering);
        lowerings.put(StoreUnresolvedFieldNode.class, storeUnresolvedFieldLowering);

        // All the RUNTIME_ENTRY methods are critical
        for (Method method : FieldSnippets.class.getDeclaredMethods()) {
            if (method.isAnnotationPresent(RUNTIME_ENTRY.class)) {
                new CriticalMethod(method);
            }
        }
    }

    protected abstract class FieldLowering {
        protected final ResolvedJavaMethod[] snippets = new ResolvedJavaMethod[Kind.values().length];

        void setSnippet(Kind kind, ResolvedJavaMethod snippet) {
            snippets[kind.ordinal()] = snippet;
        }
    }

    protected abstract class ResolvedFieldLowering extends FieldLowering {

        void lower(AccessFieldNode node) {
            FieldActor fieldActor = (FieldActor) MaxResolvedJavaField.getRiResolvedField(node.field());
            boolean isStatic = node.isStatic();
            Key key = new Key(snippets[KindMap.toGraalKind(fieldActor.kind).ordinal()]);
            key.add("isVolatile", fieldActor.isVolatile());
            Arguments args = new Arguments();
            args.add("object", isStatic ? fieldActor.holder().staticTuple() : node.object());
            args.add("offset", fieldActor.offset());
            storeFieldArg(node, args);
            cache.get(key, assumptions).instantiate(runtime, node, SnippetTemplate.DEFAULT_REPLACER, args);
        }

        protected void storeFieldArg(AccessFieldNode node, Arguments args) {
        }

    }

    protected class LoadFieldLowering extends ResolvedFieldLowering implements LoweringProvider<LoadFieldNode> {

        @Override
        public void lower(LoadFieldNode node, LoweringTool tool) {
            lower(node);
        }

    }

    protected class StoreFieldLowering extends ResolvedFieldLowering implements LoweringProvider<StoreFieldNode> {

        @Override
        public void lower(StoreFieldNode node, LoweringTool tool) {
            lower(node);
        }

        @Override
        protected void storeFieldArg(AccessFieldNode node, Arguments args) {
            args.add("value", ((StoreFieldNode) node).value());
        }
    }

    protected class UnresolvedFieldLowering extends FieldLowering {
        /**
         * Holds the snippet methods for the static variants.
         */
        UnresolvedFieldLowering staticFieldLowering;

        void lower(AccessUnresolvedFieldNode node) {
            UnresolvedField unresolvedField = (UnresolvedField) MaxJavaField.getRiField(node.field());
            ResolutionGuard.InPool guard = unresolvedField.constantPool.makeResolutionGuard(unresolvedField.cpi);
            boolean isStatic = node.object() == null;
            int ord = node.kind().ordinal();
            Key key = new Key(isStatic ? staticFieldLowering.snippets[ord] : snippets[ord]);
            Arguments args = new Arguments();
            args.add("guard", guard);
            if (!isStatic) {
                args.add("object", node.object());
            }
            storeFieldArg(node, args);
            cache.get(key, assumptions).instantiate(runtime, node, SnippetTemplate.DEFAULT_REPLACER, args);
        }

        protected void storeFieldArg(AccessUnresolvedFieldNode node, Arguments args) {
        }

    }

    protected class LoadUnresolvedFieldLowering extends UnresolvedFieldLowering implements LoweringProvider<LoadUnresolvedFieldNode> {

        @Override
        public void lower(LoadUnresolvedFieldNode node, LoweringTool tool) {
            lower(node);
        }

    }

    protected class StoreUnresolvedFieldLowering extends UnresolvedFieldLowering implements LoweringProvider<StoreUnresolvedFieldNode> {

        @Override
        public void lower(StoreUnresolvedFieldNode node, LoweringTool tool) {
            lower(node);
        }

    }

// START GENERATED CODE
    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean loadBooleanFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        boolean result = TupleAccess.readBoolean(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeBooleanFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") boolean value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeBoolean(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static boolean resolveAndGetFieldBoolean(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadBooleanFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static boolean resolveAndGetStaticBoolean(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadBooleanFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldBoolean(ResolutionGuard.InPool guard, Object object, boolean value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeBooleanFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticBoolean(ResolutionGuard.InPool guard, boolean value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeBooleanFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean loadBooleanUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldBoolean(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static boolean loadBooleanUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticBoolean(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeBooleanUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") boolean value) {
        resolveAndPutFieldBoolean(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeBooleanUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") boolean value) {
        resolveAndPutStaticBoolean(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte loadByteFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        byte result = TupleAccess.readByte(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeByteFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") byte value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeByte(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static byte resolveAndGetFieldByte(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadByteFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static byte resolveAndGetStaticByte(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadByteFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldByte(ResolutionGuard.InPool guard, Object object, byte value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeByteFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticByte(ResolutionGuard.InPool guard, byte value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeByteFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte loadByteUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldByte(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static byte loadByteUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticByte(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeByteUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") byte value) {
        resolveAndPutFieldByte(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeByteUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") byte value) {
        resolveAndPutStaticByte(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short loadShortFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        short result = TupleAccess.readShort(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeShortFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") short value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeShort(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static short resolveAndGetFieldShort(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadShortFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static short resolveAndGetStaticShort(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadShortFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldShort(ResolutionGuard.InPool guard, Object object, short value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeShortFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticShort(ResolutionGuard.InPool guard, short value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeShortFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short loadShortUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldShort(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static short loadShortUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticShort(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeShortUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") short value) {
        resolveAndPutFieldShort(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeShortUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") short value) {
        resolveAndPutStaticShort(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char loadCharFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        char result = TupleAccess.readChar(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeCharFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") char value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeChar(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static char resolveAndGetFieldChar(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadCharFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static char resolveAndGetStaticChar(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadCharFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldChar(ResolutionGuard.InPool guard, Object object, char value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeCharFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticChar(ResolutionGuard.InPool guard, char value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeCharFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char loadCharUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldChar(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static char loadCharUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticChar(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeCharUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") char value) {
        resolveAndPutFieldChar(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeCharUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") char value) {
        resolveAndPutStaticChar(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int loadIntFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        int result = TupleAccess.readInt(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeIntFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") int value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeInt(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static int resolveAndGetFieldInt(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadIntFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static int resolveAndGetStaticInt(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadIntFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldInt(ResolutionGuard.InPool guard, Object object, int value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeIntFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticInt(ResolutionGuard.InPool guard, int value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeIntFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int loadIntUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldInt(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static int loadIntUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticInt(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeIntUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") int value) {
        resolveAndPutFieldInt(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeIntUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") int value) {
        resolveAndPutStaticInt(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float loadFloatFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        float result = TupleAccess.readFloat(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeFloatFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") float value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeFloat(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static float resolveAndGetFieldFloat(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadFloatFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static float resolveAndGetStaticFloat(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadFloatFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldFloat(ResolutionGuard.InPool guard, Object object, float value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeFloatFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticFloat(ResolutionGuard.InPool guard, float value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeFloatFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float loadFloatUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldFloat(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static float loadFloatUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticFloat(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeFloatUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") float value) {
        resolveAndPutFieldFloat(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeFloatUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") float value) {
        resolveAndPutStaticFloat(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long loadLongFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        long result = TupleAccess.readLong(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeLongFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") long value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeLong(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static long resolveAndGetFieldLong(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadLongFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static long resolveAndGetStaticLong(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadLongFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldLong(ResolutionGuard.InPool guard, Object object, long value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeLongFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticLong(ResolutionGuard.InPool guard, long value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeLongFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long loadLongUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldLong(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static long loadLongUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticLong(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeLongUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") long value) {
        resolveAndPutFieldLong(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeLongUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") long value) {
        resolveAndPutStaticLong(guard, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double loadDoubleFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        double result = TupleAccess.readDouble(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeDoubleFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") double value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeDouble(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static double resolveAndGetFieldDouble(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadDoubleFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static double resolveAndGetStaticDouble(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadDoubleFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldDouble(ResolutionGuard.InPool guard, Object object, double value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeDoubleFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticDouble(ResolutionGuard.InPool guard, double value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeDoubleFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double loadDoubleUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldDouble(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static double loadDoubleUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticDouble(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeDoubleUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") double value) {
        resolveAndPutFieldDouble(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeDoubleUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") double value) {
        resolveAndPutStaticDouble(guard, value);
    }

//    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object loadObjectFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_READ);
        }
        Object result = TupleAccess.readObject(object, offset);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
        return result;
    }

//    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeObjectFieldSnippet(@Parameter("object") Object object,
            @Parameter("offset") int offset, @ConstantParameter("isVolatile") boolean isVolatile, @Parameter("value") Object value) {
        if (isVolatile) {
            memoryBarrier(JMM_PRE_VOLATILE_WRITE);
        }
        TupleAccess.writeObject(object, offset, value);
        if (isVolatile) {
            memoryBarrier(JMM_POST_VOLATILE_READ);
        }
    }

    @RUNTIME_ENTRY
    public static Object resolveAndGetFieldObject(ResolutionGuard.InPool guard, Object object) {
        FieldActor f = Snippets.resolveInstanceFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadObjectFieldSnippet(object, f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static Object resolveAndGetStaticObject(ResolutionGuard.InPool guard) {
        FieldActor f = Snippets.resolveStaticFieldForReading(guard);
        Snippets.makeHolderInitialized(f);
        return loadObjectFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile());
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutFieldObject(ResolutionGuard.InPool guard, Object object, Object value) {
        FieldActor f = Snippets.resolveInstanceFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeObjectFieldSnippet(object, f.offset(), f.isVolatile(), value);
    }

    @RUNTIME_ENTRY
    public static void resolveAndPutStaticObject(ResolutionGuard.InPool guard, Object value) {
        FieldActor f = Snippets.resolveStaticFieldForWriting(guard);
        Snippets.makeHolderInitialized(f);
        storeObjectFieldSnippet(f.holder().staticTuple(), f.offset(), f.isVolatile(), value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object loadObjectUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object) {
        return resolveAndGetFieldObject(guard, object);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static Object loadObjectUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard) {
        return resolveAndGetStaticObject(guard);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeObjectUnresolvedFieldSnippet(@Parameter("guard") ResolutionGuard.InPool guard, @Parameter("object") Object object,
            @Parameter("value") Object value) {
        resolveAndPutFieldObject(guard, object, value);
    }

    @Snippet(inlining = MaxSnippetInliningPolicy.class)
    public static void storeObjectUnresolvedStaticSnippet(@Parameter("guard") ResolutionGuard.InPool guard,
            @Parameter("value") Object value) {
        resolveAndPutStaticObject(guard, value);
    }

    private void addSnippets(
            LoadFieldLowering loadFieldLowering, StoreFieldLowering storeFieldLowering,
            LoadUnresolvedFieldLowering loadUnresolvedFieldLowering, StoreUnresolvedFieldLowering storeUnresolvedFieldLowering,
            LoadUnresolvedFieldLowering loadUnresolvedStaticLowering, StoreUnresolvedFieldLowering storeUnresolvedStaticLowering) {
        loadFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "loadBooleanFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "storeBooleanFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "loadBooleanUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "loadBooleanUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "storeBooleanUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Boolean, findSnippet(FieldSnippets.class, "storeBooleanUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "loadByteFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "storeByteFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "loadByteUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "loadByteUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "storeByteUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Byte, findSnippet(FieldSnippets.class, "storeByteUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "loadShortFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "storeShortFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "loadShortUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "loadShortUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "storeShortUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Short, findSnippet(FieldSnippets.class, "storeShortUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "loadCharFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "storeCharFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "loadCharUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "loadCharUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "storeCharUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Char, findSnippet(FieldSnippets.class, "storeCharUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "loadIntFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "storeIntFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "loadIntUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "loadIntUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "storeIntUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Int, findSnippet(FieldSnippets.class, "storeIntUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "loadFloatFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "storeFloatFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "loadFloatUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "loadFloatUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "storeFloatUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Float, findSnippet(FieldSnippets.class, "storeFloatUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "loadLongFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "storeLongFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "loadLongUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "loadLongUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "storeLongUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Long, findSnippet(FieldSnippets.class, "storeLongUnresolvedStaticSnippet"));
        loadFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "loadDoubleFieldSnippet"));
        storeFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "storeDoubleFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "loadDoubleUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "loadDoubleUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "storeDoubleUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Double, findSnippet(FieldSnippets.class, "storeDoubleUnresolvedStaticSnippet"));
//        loadFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "loadObjectFieldSnippet"));
//        storeFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "storeObjectFieldSnippet"));
        loadUnresolvedFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "loadObjectUnresolvedFieldSnippet"));
        loadUnresolvedStaticLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "loadObjectUnresolvedStaticSnippet"));
        storeUnresolvedFieldLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "storeObjectUnresolvedFieldSnippet"));
        storeUnresolvedStaticLowering.setSnippet(Kind.Object, findSnippet(FieldSnippets.class, "storeObjectUnresolvedStaticSnippet"));
    }
// END GENERATED CODE

}
